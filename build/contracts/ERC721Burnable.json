{
  "contractName": "ERC721Burnable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 Token that can be irreversibly burned (destroyed).\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721 Burnable Token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Burnable.sol\":\"ERC721Burnable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"keccak256\":\"0x3491510fa4862af1a43f6c860d9cf7392240196540cd3c0eea79d374d419c5a1\",\"urls\":[\"bzz-raw://3e51386d74eb723d3acaaddafce1dd0b4082ad4c10ddba6b9fc154aad2930d02\",\"dweb:/ipfs/QmcA8Huap1c7YjdVjx5TGasxKNMLgsa3XyLvQUaMa1nMt8\"]},\"@openzeppelin/contracts-ethereum-package/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x5be8533c5950173dc2b77b75108fae6e6c5449aedadde3385ba457394aad2384\",\"urls\":[\"bzz-raw://d429fb04f5b31d909dc759d0f88e28055b80b4dd43e5def4dffc947fa0609229\",\"dweb:/ipfs/QmaY9idX5CwLLtjjTQAdiiaDSrncgafkatUZXTbbajpz8b\"]},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0x77dba70b279e47f7f6941b433a26ba51b8484b557d250d3a78075ecea5a9b01d\",\"urls\":[\"bzz-raw://946383a175d8b051ab44a6a6001b09ad09403aae6af0280d9532f1fde557ba7f\",\"dweb:/ipfs/QmeTQrn4DJWnZyf7v3FRGfP7CLzESNNtFAsDDhakWH2zfp\"]},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xe0ed10f53955c35eecb02724538650a155aa940be3f0a54cd3bde6c6b0c6e48c\",\"urls\":[\"bzz-raw://7dcfda88e3225987245908c3296f3559752647036804325ebfaa9fd1545161c3\",\"dweb:/ipfs/QmXxx5rHfLL57zdgyyyG9MMv4XGN7bpVSc2MuDcaCgto6u\"]},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f\",\"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x85a33ccd7456c0e6ff481e9e307871bdeb62faf586dcdb7a45af12b54bc6781c\",\"urls\":[\"bzz-raw://8bc02bbffd7e9620e7412f73484ae33f186fdf9956b5b6d59dcfa5bdf98b0a7a\",\"dweb:/ipfs/QmbfGnTzEt45Qajpg9U8jEAnz8gnyqVQByjw72PatcUQpD\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Burnable.sol\":{\"keccak256\":\"0x7d705f920783e2f3f02f70e564bfd70a265092b17687ca5cb5dbae30be9a8562\",\"urls\":[\"bzz-raw://b1465039f9d9994875f6c09786cf51fe27e76fe3e5562fbdd1ab78dab1e347bc\",\"dweb:/ipfs/QmT8C2d47gxJe3FfdgwrwiGntQKS31L3Qrjnvr4yupQFHq\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x3481053b3fbcb2cc24d40f208f1d65a1381febbed382eaba0f6ef7ce2296dac0\",\"urls\":[\"bzz-raw://9a44cef44872a5051402b8a3e00c18c4b36f75c8394c11b71e78abdb81ffe8ca\",\"dweb:/ipfs/QmYnuiJaRrBpPbC2YnQbK8MwDVtY68dpY18ir1GZeBZrh5\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x042048c375daca04b31e31c91bbae912b84b5eb818c4e31b2deb530fd2305342\",\"urls\":[\"bzz-raw://d877a87c5e29b9ffca3e334378058c051a4e012fd3635039681003a9376baf1f\",\"dweb:/ipfs/QmR45snf93cFXtB71TZcmoGy9DbcMha8CqgkDKaLvhjXZK\"]},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\",\"urls\":[\"bzz-raw://03335b7b07c7c8c8d613cfdd8ec39a0b5ec133ee510bf2fe6cc5a496767bef4b\",\"dweb:/ipfs/Qmebp4nzPja645c9yXSdJkGq96oU3am3LUnG2K3R7XxyKf\"]},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\",\"urls\":[\"bzz-raw://5cf7c208583d4d046d75bd99f5507412ab01cce9dd9f802ce9768a416d93ea2f\",\"dweb:/ipfs/QmcQS1BBMPpVEkXP3qzwSjxHNrqDek8YeR7xbVWDC9ApC7\"]}},\"version\":1}",
  "bytecode": "0x6080604052611837806100136000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80636352211e11610081578063a22cb4651161005b578063a22cb465146102ba578063b88d4fde146102f5578063e985e9c5146103c8576100d4565b80636352211e1461025057806370a082311461026d5780638129fc1c146102b2576100d4565b806323b872dd116100b257806323b872dd146101ad57806342842e0e146101f057806342966c6814610233576100d4565b806301ffc9a7146100d9578063081812fc1461012c578063095ea7b314610172575b600080fd5b610118600480360360208110156100ef57600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016610403565b604080519115158252519081900360200190f35b6101496004803603602081101561014257600080fd5b503561043a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101ab6004803603604081101561018857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104a9565b005b6101ab600480360360608110156101c357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561062a565b6101ab6004803603606081101561020657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610686565b6101ab6004803603602081101561024957600080fd5b50356106a1565b6101496004803603602081101561026657600080fd5b50356106f3565b6102a06004803603602081101561028357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661075a565b60408051918252519081900360200190f35b6101ab6107dc565b6101ab600480360360408110156102d057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610906565b6101ab6004803603608081101561030b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116916040820135919081019060808101606082013564010000000081111561035357600080fd5b82018360208201111561036557600080fd5b8035906020019184600183028401116401000000008311171561038757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a5d945050505050565b610118600480360360408110156103de57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610abb565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526033602052604090205460ff1690565b600061044582610af6565b6104805760405162461bcd60e51b815260040180806020018281038252602c8152602001806116d9602c913960400191505060405180910390fd5b5060009081526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006104b4826106f3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105215760405162461bcd60e51b815260040180806020018281038252602181526020018061175c6021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610540610b20565b73ffffffffffffffffffffffffffffffffffffffff16148061056e575061056e81610569610b20565b610abb565b6105a95760405162461bcd60e51b815260040180806020018281038252603881526020018061164e6038913960400191505060405180910390fd5b60008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61063b610635610b20565b82610b24565b6106765760405162461bcd60e51b815260040180806020018281038252603181526020018061177d6031913960400191505060405180910390fd5b610681838383610bfc565b505050565b61068183838360405180602001604052806000815250610a5d565b6106ac610635610b20565b6106e75760405162461bcd60e51b81526004018080602001828103825260308152602001806117d36030913960400191505060405180910390fd5b6106f081610da6565b50565b60008181526066602052604081205473ffffffffffffffffffffffffffffffffffffffff16806107545760405162461bcd60e51b81526004018080602001828103825260298152602001806116b06029913960400191505060405180910390fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82166107ae5760405162461bcd60e51b815260040180806020018281038252602a815260200180611686602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260686020526040902061075490610db8565b600054610100900460ff16806107f557506107f5610dbc565b80610803575060005460ff16155b61083e5760405162461bcd60e51b815260040180806020018281038252602e815260200180611705602e913960400191505060405180910390fd5b600054610100900460ff161580156108a457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6108ac610dc2565b6108d57f80ac58cd00000000000000000000000000000000000000000000000000000000610eaf565b80156106f057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b61090e610b20565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561098e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806069600061099b610b20565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155610a0a610b20565b604080518415158152905173ffffffffffffffffffffffffffffffffffffffff92909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b610a6e610a68610b20565b83610b24565b610aa95760405162461bcd60e51b815260040180806020018281038252603181526020018061177d6031913960400191505060405180910390fd5b610ab584848484610f81565b50505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260696020908152604080832093909416825291909152205460ff1690565b60009081526066602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b3390565b6000610b2f82610af6565b610b6a5760405162461bcd60e51b815260040180806020018281038252602c815260200180611622602c913960400191505060405180910390fd5b6000610b75836106f3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610be457508373ffffffffffffffffffffffffffffffffffffffff16610bcc8461043a565b73ffffffffffffffffffffffffffffffffffffffff16145b80610bf45750610bf48185610abb565b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610c1c826106f3565b73ffffffffffffffffffffffffffffffffffffffff1614610c6e5760405162461bcd60e51b81526004018080602001828103825260298152602001806117336029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610cc05760405162461bcd60e51b81526004018080602001828103825260248152602001806115fe6024913960400191505060405180910390fd5b610cc981610fd3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152606860205260409020610cf790611033565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260409020610d259061104a565b60008181526066602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6106f0610db2826106f3565b82611053565b5490565b303b1590565b600054610100900460ff1680610ddb5750610ddb610dbc565b80610de9575060005460ff16155b610e245760405162461bcd60e51b815260040180806020018281038252602e815260200180611705602e913960400191505060405180910390fd5b600054610100900460ff16158015610e8a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6108d57f01ffc9a7000000000000000000000000000000000000000000000000000000005b7fffffffff000000000000000000000000000000000000000000000000000000008082161415610f26576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000016600090815260336020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b610f8c848484610bfc565b610f9884848484611176565b610ab55760405162461bcd60e51b81526004018080602001828103825260328152602001806115cc6032913960400191505060405180910390fd5b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16156106f057600090815260676020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b805461104690600163ffffffff6114b216565b9055565b80546001019055565b8173ffffffffffffffffffffffffffffffffffffffff16611073826106f3565b73ffffffffffffffffffffffffffffffffffffffff16146110c55760405162461bcd60e51b81526004018080602001828103825260258152602001806117ae6025913960400191505060405180910390fd5b6110ce81610fd3565b73ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604090206110fc90611033565b60008181526066602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182919073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006111978473ffffffffffffffffffffffffffffffffffffffff166114fb565b6111a357506001610bf4565b6000606073ffffffffffffffffffffffffffffffffffffffff86167f150b7a02000000000000000000000000000000000000000000000000000000006111e7610b20565b898888604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561129457818101518382015260200161127c565b50505050905090810190601f1680156112c15780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909a16999099178952518151919890975087965094509250829150849050835b6020831061139257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611355565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146113f4576040519150601f19603f3d011682016040523d82523d6000602084013e6113f9565b606091505b50915091508161144a578051156114135780518082602001fd5b60405162461bcd60e51b81526004018080602001828103825260328152602001806115cc6032913960400191505060405180910390fd5b600081806020019051602081101561146157600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149350610bf492505050565b60006114f483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611534565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bf4575050151592915050565b600081848411156115c35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611588578181015183820152602001611570565b50505050905090810190601f1680156115b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65644552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a265627a7a723158207196cde4394e876c08c9fd5c64e7fad473beafa4877b8cf2322fa249a07762a764736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c80636352211e11610081578063a22cb4651161005b578063a22cb465146102ba578063b88d4fde146102f5578063e985e9c5146103c8576100d4565b80636352211e1461025057806370a082311461026d5780638129fc1c146102b2576100d4565b806323b872dd116100b257806323b872dd146101ad57806342842e0e146101f057806342966c6814610233576100d4565b806301ffc9a7146100d9578063081812fc1461012c578063095ea7b314610172575b600080fd5b610118600480360360208110156100ef57600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016610403565b604080519115158252519081900360200190f35b6101496004803603602081101561014257600080fd5b503561043a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101ab6004803603604081101561018857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104a9565b005b6101ab600480360360608110156101c357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561062a565b6101ab6004803603606081101561020657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610686565b6101ab6004803603602081101561024957600080fd5b50356106a1565b6101496004803603602081101561026657600080fd5b50356106f3565b6102a06004803603602081101561028357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661075a565b60408051918252519081900360200190f35b6101ab6107dc565b6101ab600480360360408110156102d057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610906565b6101ab6004803603608081101561030b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116916040820135919081019060808101606082013564010000000081111561035357600080fd5b82018360208201111561036557600080fd5b8035906020019184600183028401116401000000008311171561038757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a5d945050505050565b610118600480360360408110156103de57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610abb565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526033602052604090205460ff1690565b600061044582610af6565b6104805760405162461bcd60e51b815260040180806020018281038252602c8152602001806116d9602c913960400191505060405180910390fd5b5060009081526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006104b4826106f3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105215760405162461bcd60e51b815260040180806020018281038252602181526020018061175c6021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610540610b20565b73ffffffffffffffffffffffffffffffffffffffff16148061056e575061056e81610569610b20565b610abb565b6105a95760405162461bcd60e51b815260040180806020018281038252603881526020018061164e6038913960400191505060405180910390fd5b60008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61063b610635610b20565b82610b24565b6106765760405162461bcd60e51b815260040180806020018281038252603181526020018061177d6031913960400191505060405180910390fd5b610681838383610bfc565b505050565b61068183838360405180602001604052806000815250610a5d565b6106ac610635610b20565b6106e75760405162461bcd60e51b81526004018080602001828103825260308152602001806117d36030913960400191505060405180910390fd5b6106f081610da6565b50565b60008181526066602052604081205473ffffffffffffffffffffffffffffffffffffffff16806107545760405162461bcd60e51b81526004018080602001828103825260298152602001806116b06029913960400191505060405180910390fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82166107ae5760405162461bcd60e51b815260040180806020018281038252602a815260200180611686602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260686020526040902061075490610db8565b600054610100900460ff16806107f557506107f5610dbc565b80610803575060005460ff16155b61083e5760405162461bcd60e51b815260040180806020018281038252602e815260200180611705602e913960400191505060405180910390fd5b600054610100900460ff161580156108a457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6108ac610dc2565b6108d57f80ac58cd00000000000000000000000000000000000000000000000000000000610eaf565b80156106f057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b61090e610b20565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561098e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806069600061099b610b20565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155610a0a610b20565b604080518415158152905173ffffffffffffffffffffffffffffffffffffffff92909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b610a6e610a68610b20565b83610b24565b610aa95760405162461bcd60e51b815260040180806020018281038252603181526020018061177d6031913960400191505060405180910390fd5b610ab584848484610f81565b50505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260696020908152604080832093909416825291909152205460ff1690565b60009081526066602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b3390565b6000610b2f82610af6565b610b6a5760405162461bcd60e51b815260040180806020018281038252602c815260200180611622602c913960400191505060405180910390fd5b6000610b75836106f3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610be457508373ffffffffffffffffffffffffffffffffffffffff16610bcc8461043a565b73ffffffffffffffffffffffffffffffffffffffff16145b80610bf45750610bf48185610abb565b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610c1c826106f3565b73ffffffffffffffffffffffffffffffffffffffff1614610c6e5760405162461bcd60e51b81526004018080602001828103825260298152602001806117336029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610cc05760405162461bcd60e51b81526004018080602001828103825260248152602001806115fe6024913960400191505060405180910390fd5b610cc981610fd3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152606860205260409020610cf790611033565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260409020610d259061104a565b60008181526066602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6106f0610db2826106f3565b82611053565b5490565b303b1590565b600054610100900460ff1680610ddb5750610ddb610dbc565b80610de9575060005460ff16155b610e245760405162461bcd60e51b815260040180806020018281038252602e815260200180611705602e913960400191505060405180910390fd5b600054610100900460ff16158015610e8a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6108d57f01ffc9a7000000000000000000000000000000000000000000000000000000005b7fffffffff000000000000000000000000000000000000000000000000000000008082161415610f26576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000016600090815260336020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b610f8c848484610bfc565b610f9884848484611176565b610ab55760405162461bcd60e51b81526004018080602001828103825260328152602001806115cc6032913960400191505060405180910390fd5b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16156106f057600090815260676020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b805461104690600163ffffffff6114b216565b9055565b80546001019055565b8173ffffffffffffffffffffffffffffffffffffffff16611073826106f3565b73ffffffffffffffffffffffffffffffffffffffff16146110c55760405162461bcd60e51b81526004018080602001828103825260258152602001806117ae6025913960400191505060405180910390fd5b6110ce81610fd3565b73ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604090206110fc90611033565b60008181526066602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182919073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006111978473ffffffffffffffffffffffffffffffffffffffff166114fb565b6111a357506001610bf4565b6000606073ffffffffffffffffffffffffffffffffffffffff86167f150b7a02000000000000000000000000000000000000000000000000000000006111e7610b20565b898888604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561129457818101518382015260200161127c565b50505050905090810190601f1680156112c15780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909a16999099178952518151919890975087965094509250829150849050835b6020831061139257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611355565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146113f4576040519150601f19603f3d011682016040523d82523d6000602084013e6113f9565b606091505b50915091508161144a578051156114135780518082602001fd5b60405162461bcd60e51b81526004018080602001828103825260328152602001806115cc6032913960400191505060405180910390fd5b600081806020019051602081101561146157600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149350610bf492505050565b60006114f483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611534565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610bf4575050151592915050565b600081848411156115c35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611588578181015183820152602001611570565b50505050905090810190601f1680156115b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65644552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a265627a7a723158207196cde4394e876c08c9fd5c64e7fad473beafa4877b8cf2322fa249a07762a764736f6c63430005110032",
  "sourceMap": "249:461:86:-;;;;;;;;;",
  "deployedSourceMap": "249:461:86:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;249:461:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1008:131:74;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1008:131:74;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4538:200:85;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4538:200:85;;:::i;:::-;;;;;;;;;;;;;;;;;;;3838:415;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3838:415:85;;;;;;;;;:::i;:::-;;6184:287;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6184:287:85;;;;;;;;;;;;;;;;;;:::i;7120:132::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7120:132:85;;;;;;;;;;;;;;;;;;:::i;439:233:86:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;439:233:86;;:::i;3194:223:85:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3194:223:85;;:::i;2768:207::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2768:207:85;;;;:::i;:::-;;;;;;;;;;;;;;;;2230:205;;;:::i;5031:249::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5031:249:85;;;;;;;;;;;:::i;7975:269::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7975:269:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7975:269:85;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7975:269:85;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7975:269:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7975:269:85;;-1:-1:-1;7975:269:85;;-1:-1:-1;;;;;7975:269:85:i;5602:145::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5602:145:85;;;;;;;;;;;:::i;1008:131:74:-;1099:33;;1076:4;1099:33;;;:20;:33;;;;;;;;;1008:131::o;4538:200:85:-;4597:7;4624:16;4632:7;4624;:16::i;:::-;4616:73;;;;-1:-1:-1;;;4616:73:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4707:24:85;;;;:15;:24;;;;;;;;;4538:200::o;3838:415::-;3901:13;3917:16;3925:7;3917;:16::i;:::-;3901:32;;3957:5;3951:11;;:2;:11;;;;3943:57;;;;-1:-1:-1;;;3943:57:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4035:5;4019:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;4044:37;4061:5;4068:12;:10;:12::i;:::-;4044:16;:37::i;:::-;4011:152;;;;-1:-1:-1;;;4011:152:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4174:24;;;;:15;:24;;;;;;:29;;;;;;;;;;;;;;4218:28;;4174:24;;4218:28;;;;;;;3838:415;;;:::o;6184:287::-;6326:41;6345:12;:10;:12::i;:::-;6359:7;6326:18;:41::i;:::-;6318:103;;;;-1:-1:-1;;;6318:103:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6432:32;6446:4;6452:2;6456:7;6432:13;:32::i;:::-;6184:287;;;:::o;7120:132::-;7206:39;7223:4;7229:2;7233:7;7206:39;;;;;;;;;;;;:16;:39::i;439:233:86:-;547:41;566:12;:10;:12::i;547:41::-;539:102;;;;-1:-1:-1;;;539:102:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;651:14;657:7;651:5;:14::i;:::-;439:233;:::o;3194:223:85:-;3249:7;3284:20;;;:11;:20;;;;;;;;3322:19;3314:73;;;;-1:-1:-1;;;3314:73:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3405:5;3194:223;-1:-1:-1;;3194:223:85:o;2768:207::-;2823:7;2850:19;;;2842:74;;;;-1:-1:-1;;;2842:74:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2934:24;;;;;;;:17;:24;;;;;:34;;:32;:34::i;2230:205::-;1024:12:95;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:95;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;1225:18;1198:19;;;;;;1225:18;1213:4;1225:18;;;1170:80;2281:19:85;:17;:19::i;:::-;2388:40;2407:20;2388:18;:40::i;:::-;1268:14:95;1264:55;;;1307:5;1292:20;;;;;;2230:205:85;:::o;5031:249::-;5116:12;:10;:12::i;:::-;5110:18;;:2;:18;;;;5102:56;;;;;-1:-1:-1;;;5102:56:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;5208:8;5169:18;:32;5188:12;:10;:12::i;:::-;5169:32;;;;;;;;;;;;;;;;;;-1:-1:-1;5169:32:85;;;:36;;;;;;;;;;;;:47;;;;;;;;;;;;;;5246:12;:10;:12::i;:::-;5231:42;;;;;;;;;;;;;;;;;;;;;;;;;5031:249;;:::o;7975:269::-;8089:41;8108:12;:10;:12::i;:::-;8122:7;8089:18;:41::i;:::-;8081:103;;;;-1:-1:-1;;;8081:103:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8194:43;8212:4;8218:2;8222:7;8231:5;8194:17;:43::i;:::-;7975:269;;;;:::o;5602:145::-;5705:25;;;;5682:4;5705:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5602:145::o;9415:152::-;9472:4;9504:20;;;:11;:20;;;;;;;;9541:19;;;9415:152::o;867:96:67:-;946:10;867:96;:::o;9928:329:85:-;10013:4;10037:16;10045:7;10037;:16::i;:::-;10029:73;;;;-1:-1:-1;;;10029:73:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10112:13;10128:16;10136:7;10128;:16::i;:::-;10112:32;;10173:5;10162:16;;:7;:16;;;:51;;;;10206:7;10182:31;;:20;10194:7;10182:11;:20::i;:::-;:31;;;10162:51;:87;;;;10217:32;10234:5;10241:7;10217:16;:32::i;:::-;10154:96;9928:329;-1:-1:-1;;;;9928:329:85:o;13538:447::-;13651:4;13631:24;;:16;13639:7;13631;:16::i;:::-;:24;;;13623:78;;;;-1:-1:-1;;;13623:78:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13719:16;;;13711:65;;;;-1:-1:-1;;;13711:65:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13787:23;13802:7;13787:14;:23::i;:::-;13821;;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;13866:21;;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;13910:20;;;;:11;:20;;;;;;:25;;;;;;;;;;;;;;13951:27;;13910:20;;13951:27;;;;;;;13538:447;;;:::o;13071:90::-;13122:32;13128:16;13136:7;13128;:16::i;:::-;13146:7;13122:5;:32::i;1065:112:73:-;1156:14;;1065:112::o;1409:498:95:-;1820:4;1864:17;1895:7;1409:498;:::o;624:234:74:-;1024:12:95;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:95;;;;1059:12;1024:47;1016:106;;;;-1:-1:-1;;;1016:106:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;1225:18;1198:19;;;;;;1225:18;1213:4;1225:18;;;1170:80;811:40:74;830:20;1533:190;1608:25;;;;;;1600:66;;;;;-1:-1:-1;;;1600:66:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;1676:33;;;;;;:20;:33;;;;;:40;;;;1712:4;1676:40;;;1533:190::o;8951:269:85:-;9060:32;9074:4;9080:2;9084:7;9060:13;:32::i;:::-;9110:48;9133:4;9139:2;9143:7;9152:5;9110:22;:48::i;:::-;9102:111;;;;-1:-1:-1;;;9102:111:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15837:171;15936:1;15900:24;;;:15;:24;;;;;;:38;:24;:38;15896:106;;15989:1;15954:24;;;:15;:24;;;;;:37;;;;;;15837:171::o;1367:108:73:-;1447:14;;:21;;1466:1;1447:21;:18;:21;:::i;:::-;1430:38;;1367:108::o;1183:178::-;1335:19;;1353:1;1335:19;;;1183:178::o;12566:324:85:-;12660:5;12640:25;;:16;12648:7;12640;:16::i;:::-;:25;;;12632:75;;;;-1:-1:-1;;;12632:75:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12718:23;12733:7;12718:14;:23::i;:::-;12752:24;;;;;;;:17;:24;;;;;:36;;:34;:36::i;:::-;12829:1;12798:20;;;:11;:20;;;;;;:33;;;;;;12847:36;12810:7;;12829:1;12798:33;12847:36;;;;;12829:1;;12847:36;12566:324;;:::o;14624:1051::-;14745:4;14770:15;:2;:13;;;:15::i;:::-;14765:58;;-1:-1:-1;14808:4:85;14801:11;;14765:58;14892:12;14906:23;14933:7;;;14977:45;15036:12;:10;:12::i;:::-;15062:4;15080:7;15101:5;14941:175;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14941:175:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14941:175:85;;;22:32:-1;26:21;;;22:32;6:49;;14941:175:85;;;49:4:-1;25:18;;61:17;;14941:175:85;182:15:-1;14941:175:85;;;;179:29:-1;;;;160:49;;14933:184:85;;;14941:175;;14933:184;;-1:-1:-1;14933:184:85;;-1:-1:-1;25:18;-1:-1;14933:184:85;-1:-1:-1;14933:184:85;;-1:-1:-1;14933:184:85;;-1:-1:-1;25:18;36:153;66:2;61:3;58:11;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;14933:184:85;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;14891:226:85;;;;15132:7;15127:542;;15159:17;;:21;15155:376;;15324:10;15318:17;15384:15;15371:10;15367:2;15363:19;15356:44;15273:145;15456:60;;-1:-1:-1;;;15456:60:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15127:542;15561:13;15588:10;15577:32;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15577:32:85;15631:26;;15641:16;15631:26;;-1:-1:-1;15623:35:85;;-1:-1:-1;;;15623:35:85;1274:134:77;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;1274:134;-1:-1:-1;;;1274:134:77:o;686:610:94:-;746:4;1207:20;;1052:66;1246:23;;;;;;:42;;-1:-1:-1;;1273:15:94;;;1238:51;-1:-1:-1;;686:610:94:o;1732:187:77:-;1818:7;1853:12;1845:6;;;;1837:29;;;;-1:-1:-1;;;1837:29:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1837:29:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1888:5:77;;;1732:187::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\n\nimport \"../../GSN/Context.sol\";\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract ERC721Burnable is Initializable, Context, ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Burnable.sol",
  "ast": {
    "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        22567
      ]
    },
    "id": 22568,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 22534,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:86"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 22535,
        "nodeType": "ImportDirective",
        "scope": 22568,
        "sourceUnit": 23472,
        "src": "25:60:86",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol",
        "file": "../../GSN/Context.sol",
        "id": 22536,
        "nodeType": "ImportDirective",
        "scope": 22568,
        "sourceUnit": 19860,
        "src": "87:31:86",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 22537,
        "nodeType": "ImportDirective",
        "scope": 22568,
        "sourceUnit": 22533,
        "src": "119:22:86",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 22538,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 23471,
              "src": "276:13:86",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$23471",
                "typeString": "contract Initializable"
              }
            },
            "id": 22539,
            "nodeType": "InheritanceSpecifier",
            "src": "276:13:86"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 22540,
              "name": "Context",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 19859,
              "src": "291:7:86",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Context_$19859",
                "typeString": "contract Context"
              }
            },
            "id": 22541,
            "nodeType": "InheritanceSpecifier",
            "src": "291:7:86"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 22542,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 22532,
              "src": "300:6:86",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$22532",
                "typeString": "contract ERC721"
              }
            },
            "id": 22543,
            "nodeType": "InheritanceSpecifier",
            "src": "300:6:86"
          }
        ],
        "contractDependencies": [
          19859,
          20553,
          20563,
          22532,
          23255,
          23471
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 22567,
        "linearizedBaseContracts": [
          22567,
          22532,
          23255,
          20553,
          20563,
          19859,
          23471
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 22561,
              "nodeType": "Block",
              "src": "477:195:86",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 22550,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19847,
                              "src": "566:10:86",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                "typeString": "function () view returns (address payable)"
                              }
                            },
                            "id": 22551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "566:12:86",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 22552,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22545,
                            "src": "580:7:86",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 22549,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 22232,
                          "src": "547:18:86",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 22553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "547:41:86",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 22554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "590:50:86",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        },
                        "value": "ERC721Burnable: caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        }
                      ],
                      "id": 22548,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        23489,
                        23490
                      ],
                      "referencedDeclaration": 23490,
                      "src": "539:7:86",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 22555,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "539:102:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22556,
                  "nodeType": "ExpressionStatement",
                  "src": "539:102:86"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 22558,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22545,
                        "src": "657:7:86",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 22557,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        22361,
                        22374
                      ],
                      "referencedDeclaration": 22374,
                      "src": "651:5:86",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 22559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "651:14:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22560,
                  "nodeType": "ExpressionStatement",
                  "src": "651:14:86"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 22562,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 22546,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 22545,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 22562,
                  "src": "453:15:86",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 22544,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "453:7:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "452:17:86"
            },
            "returnParameters": {
              "id": 22547,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "477:0:86"
            },
            "scope": 22567,
            "src": "439:233:86",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 22566,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 22567,
            "src": "678:29:86",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 22563,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "678:7:86",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 22565,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 22564,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "686:2:86",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "678:11:86",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 22568,
        "src": "249:461:86"
      }
    ],
    "src": "0:711:86"
  },
  "legacyAST": {
    "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        22567
      ]
    },
    "id": 22568,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 22534,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:86"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 22535,
        "nodeType": "ImportDirective",
        "scope": 22568,
        "sourceUnit": 23472,
        "src": "25:60:86",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol",
        "file": "../../GSN/Context.sol",
        "id": 22536,
        "nodeType": "ImportDirective",
        "scope": 22568,
        "sourceUnit": 19860,
        "src": "87:31:86",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 22537,
        "nodeType": "ImportDirective",
        "scope": 22568,
        "sourceUnit": 22533,
        "src": "119:22:86",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 22538,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 23471,
              "src": "276:13:86",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$23471",
                "typeString": "contract Initializable"
              }
            },
            "id": 22539,
            "nodeType": "InheritanceSpecifier",
            "src": "276:13:86"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 22540,
              "name": "Context",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 19859,
              "src": "291:7:86",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Context_$19859",
                "typeString": "contract Context"
              }
            },
            "id": 22541,
            "nodeType": "InheritanceSpecifier",
            "src": "291:7:86"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 22542,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 22532,
              "src": "300:6:86",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$22532",
                "typeString": "contract ERC721"
              }
            },
            "id": 22543,
            "nodeType": "InheritanceSpecifier",
            "src": "300:6:86"
          }
        ],
        "contractDependencies": [
          19859,
          20553,
          20563,
          22532,
          23255,
          23471
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 22567,
        "linearizedBaseContracts": [
          22567,
          22532,
          23255,
          20553,
          20563,
          19859,
          23471
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 22561,
              "nodeType": "Block",
              "src": "477:195:86",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 22550,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19847,
                              "src": "566:10:86",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                "typeString": "function () view returns (address payable)"
                              }
                            },
                            "id": 22551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "566:12:86",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 22552,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22545,
                            "src": "580:7:86",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 22549,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 22232,
                          "src": "547:18:86",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 22553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "547:41:86",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 22554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "590:50:86",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        },
                        "value": "ERC721Burnable: caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        }
                      ],
                      "id": 22548,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        23489,
                        23490
                      ],
                      "referencedDeclaration": 23490,
                      "src": "539:7:86",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 22555,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "539:102:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22556,
                  "nodeType": "ExpressionStatement",
                  "src": "539:102:86"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 22558,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22545,
                        "src": "657:7:86",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 22557,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        22361,
                        22374
                      ],
                      "referencedDeclaration": 22374,
                      "src": "651:5:86",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 22559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "651:14:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22560,
                  "nodeType": "ExpressionStatement",
                  "src": "651:14:86"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 22562,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 22546,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 22545,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 22562,
                  "src": "453:15:86",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 22544,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "453:7:86",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "452:17:86"
            },
            "returnParameters": {
              "id": 22547,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "477:0:86"
            },
            "scope": 22567,
            "src": "439:233:86",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 22566,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 22567,
            "src": "678:29:86",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 22563,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "678:7:86",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 22565,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 22564,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "686:2:86",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "678:11:86",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 22568,
        "src": "249:461:86"
      }
    ],
    "src": "0:711:86"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-08-09T16:13:08.601Z",
  "devdoc": {
    "details": "ERC721 Token that can be irreversibly burned (destroyed).",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721 Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}