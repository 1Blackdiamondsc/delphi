/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICurveFiDepositContract
  extends Truffle.Contract<ICurveFiDepositInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiDepositInstance>;
}

type AllEvents = never;

export interface ICurveFiDepositInstance extends Truffle.ContractInstance {
  withdraw_donated_dust: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  coins(
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  underlying_coins(
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calc_withdraw_one_coin(
    _token_amount: number | BN | string,
    i: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    withdraw_donated_dust: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    coins(
      i: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    underlying_coins(
      i: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    calc_withdraw_one_coin(
      _token_amount: number | BN | string,
      i: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "remove_liquidity_one_coin(uint256,int128,uint256)": {
      (
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "remove_liquidity_one_coin(uint256,int128,uint256,bool)": {
      (
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        donate_dust: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        donate_dust: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        donate_dust: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token_amount: number | BN | string,
        i: number | BN | string,
        min_uamount: number | BN | string,
        donate_dust: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
