/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISavingsModuleContract
  extends Truffle.Contract<ISavingsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISavingsModuleInstance>;
}

type AllEvents = never;

export interface ISavingsModuleInstance extends Truffle.ContractInstance {
  /**
   * Deposit tokens to a protocol
   * @param _dnAmounts Array of amounts (denormalized to token decimals)
   * @param _protocol Protocol to deposit tokens
   * @param _tokens Array of tokens to deposit
   */
  deposit: {
    (
      _protocol: string,
      _tokens: string[],
      _dnAmounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _protocol: string,
      _tokens: string[],
      _dnAmounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _protocol: string,
      _tokens: string[],
      _dnAmounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string,
      _tokens: string[],
      _dnAmounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw token from protocol
   * @param _protocol Protocol to withdraw from
   * @param dnAmount Amount to withdraw (denormalized)
   * @param maxNAmount Max amount of PoolToken to burn
   * @param token Token to withdraw
   * @returns Amount of PoolToken burned from user
   */
  withdraw: {
    (
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw reward tokens for user
   * @param rewardTokens Array of tokens to withdraw
   */
  withdrawReward: {
    (rewardTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  methods: {
    /**
     * Deposit tokens to a protocol
     * @param _dnAmounts Array of amounts (denormalized to token decimals)
     * @param _protocol Protocol to deposit tokens
     * @param _tokens Array of tokens to deposit
     */
    deposit: {
      (
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw token from protocol
     * @param _protocol Protocol to withdraw from
     * @param dnAmount Amount to withdraw (denormalized)
     * @param maxNAmount Max amount of PoolToken to burn
     * @param token Token to withdraw
     * @returns Amount of PoolToken burned from user
     */
    withdraw: {
      (
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw reward tokens for user
     * @param rewardTokens Array of tokens to withdraw
     */
    withdrawReward: {
      (rewardTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    supportedRewardTokens(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
