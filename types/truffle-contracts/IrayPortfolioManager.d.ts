/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IrayPortfolioManagerContract
  extends Truffle.Contract<IrayPortfolioManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IrayPortfolioManagerInstance>;
}

type AllEvents = never;

export interface IrayPortfolioManagerInstance extends Truffle.ContractInstance {
  /**
   * Mints a RAY token of the associated basket of opportunities to the portfolioId
   * @param beneficiary - the owner and beneficiary of the RAY token
   * @param portfolioId - the id of the portfolio to associate the RAY token with
   * @param value - the amount in the smallest units in-kind to deposit into RAY
   * @returns the unique RAY token id, used to reference anything in the RAY system
   */
  mint: {
    (
      portfolioId: string,
      beneficiary: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      portfolioId: string,
      beneficiary: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      portfolioId: string,
      beneficiary: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string,
      beneficiary: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Anybody can deposit into a RAY token, not just the owner
   * Deposits assets into an existing RAY token
   * @param tokenId - the id of the RAY token to add value too
   * @param value - the amount in the smallest units in-kind to deposit into the RAY
   */
  deposit: {
    (
      tokenId: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Can partially or fully redeem the RAY token     ///          Only the owner of the RAY token can call this, or the Staked          'GasFunder' smart contract
   * Redeems a RAY token for the underlying value
   * @param originalCaller - only relevant for our `GasFunder` smart contract,                           for everyone else, can be set to anything
   * @param tokenId - the id of the RAY token to redeem value from
   * @param valueToWithdraw - the amount in the smallest units in-kind to redeem from the RAY
   * @returns the amount transferred to the owner of the RAY token after fees
   */
  redeem: {
    (
      tokenId: string,
      valueToWithdraw: number | BN | string,
      originalCaller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: string,
      valueToWithdraw: number | BN | string,
      originalCaller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenId: string,
      valueToWithdraw: number | BN | string,
      originalCaller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string,
      valueToWithdraw: number | BN | string,
      originalCaller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Mints a RAY token of the associated basket of opportunities to the portfolioId
     * @param beneficiary - the owner and beneficiary of the RAY token
     * @param portfolioId - the id of the portfolio to associate the RAY token with
     * @param value - the amount in the smallest units in-kind to deposit into RAY
     * @returns the unique RAY token id, used to reference anything in the RAY system
     */
    mint: {
      (
        portfolioId: string,
        beneficiary: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        portfolioId: string,
        beneficiary: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        portfolioId: string,
        beneficiary: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        portfolioId: string,
        beneficiary: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Anybody can deposit into a RAY token, not just the owner
     * Deposits assets into an existing RAY token
     * @param tokenId - the id of the RAY token to add value too
     * @param value - the amount in the smallest units in-kind to deposit into the RAY
     */
    deposit: {
      (
        tokenId: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Can partially or fully redeem the RAY token     ///          Only the owner of the RAY token can call this, or the Staked          'GasFunder' smart contract
     * Redeems a RAY token for the underlying value
     * @param originalCaller - only relevant for our `GasFunder` smart contract,                           for everyone else, can be set to anything
     * @param tokenId - the id of the RAY token to redeem value from
     * @param valueToWithdraw - the amount in the smallest units in-kind to redeem from the RAY
     * @returns the amount transferred to the owner of the RAY token after fees
     */
    redeem: {
      (
        tokenId: string,
        valueToWithdraw: number | BN | string,
        originalCaller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: string,
        valueToWithdraw: number | BN | string,
        originalCaller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tokenId: string,
        valueToWithdraw: number | BN | string,
        originalCaller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: string,
        valueToWithdraw: number | BN | string,
        originalCaller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
