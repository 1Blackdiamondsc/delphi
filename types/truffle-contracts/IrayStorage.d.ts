/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IrayStorageContract
  extends Truffle.Contract<IrayStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IrayStorageInstance>;
}

type AllEvents = never;

export interface IrayStorageInstance extends Truffle.ContractInstance {
  /**
   * Get the portfolioId associated with a RAY token
   */
  getTokenKey(
    rayTokenId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the contract address of the underlying asset associated with a          portfolioId
   */
  getPrincipalAddress(
    portfolioId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get if a contract address follows the ERC20 standard or not
   */
  getIsERC20(
    principalAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Dynamically get the contract address of different RAY smart contracts
   * @param contractId - Each contract has an id represented by the result of                       a keccak256() of the contract name.     ///                       Example: PortfolioManager.sol can be dynamically referenced                       by getContractAddress(keccak256('PortfolioManagerContract'));
   */
  getContractAddress(
    contractId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the shares owned by a RAY token
   */
  getTokenShares(
    portfolioId: string,
    rayTokenId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the capital credited to a RAY token
   */
  getTokenCapital(
    portfolioId: string,
    rayTokenId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the allowance credited to a RAY token - allowance decides what          amount of value will be charged a fee
   */
  getTokenAllowance(
    portfolioId: string,
    rayTokenId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Get the portfolioId associated with a RAY token
     */
    getTokenKey(
      rayTokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the contract address of the underlying asset associated with a          portfolioId
     */
    getPrincipalAddress(
      portfolioId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get if a contract address follows the ERC20 standard or not
     */
    getIsERC20(
      principalAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Dynamically get the contract address of different RAY smart contracts
     * @param contractId - Each contract has an id represented by the result of                       a keccak256() of the contract name.     ///                       Example: PortfolioManager.sol can be dynamically referenced                       by getContractAddress(keccak256('PortfolioManagerContract'));
     */
    getContractAddress(
      contractId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the shares owned by a RAY token
     */
    getTokenShares(
      portfolioId: string,
      rayTokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the capital credited to a RAY token
     */
    getTokenCapital(
      portfolioId: string,
      rayTokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the allowance credited to a RAY token - allowance decides what          amount of value will be charged a fee
     */
    getTokenAllowance(
      portfolioId: string,
      rayTokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
