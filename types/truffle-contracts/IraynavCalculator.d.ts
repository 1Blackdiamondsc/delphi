/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IraynavCalculatorContract
  extends Truffle.Contract<IraynavCalculatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IraynavCalculatorInstance>;
}

type AllEvents = never;

export interface IraynavCalculatorInstance extends Truffle.ContractInstance {
  /**
   * The implementation of this function exists in NAVCalculator
   * Get the underlying value of a RAY token (principal + yield earnt)
   * @param portfolioId - the id of the portfolio associated with the RAY token
   * @param tokenId - the id of the RAY token to get the value of
   * @returns an array of two, the first value is the current token value, the          second value is the current price per share of the portfolio
   */
  getTokenValue: {
    (
      portfolioId: string,
      tokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      portfolioId: string,
      tokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      portfolioId: string,
      tokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string,
      tokenId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * The implementation of this function exists in NAVCalculator
     * Get the underlying value of a RAY token (principal + yield earnt)
     * @param portfolioId - the id of the portfolio associated with the RAY token
     * @param tokenId - the id of the RAY token to get the value of
     * @returns an array of two, the first value is the current token value, the          second value is the current price per share of the portfolio
     */
    getTokenValue: {
      (
        portfolioId: string,
        tokenId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        portfolioId: string,
        tokenId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, BN]>;
      sendTransaction(
        portfolioId: string,
        tokenId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        portfolioId: string,
        tokenId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
