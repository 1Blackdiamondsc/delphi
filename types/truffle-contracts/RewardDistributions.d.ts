/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RewardDistributionsContract
  extends Truffle.Contract<RewardDistributionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RewardDistributionsInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface RewardDistribution {
  name: "RewardDistribution";
  args: {
    poolToken: string;
    rewardRoken: string;
    amount: BN;
    totalShares: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface RewardWithdraw {
  name: "RewardWithdraw";
  args: {
    user: string;
    rewardToken: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = OwnershipTransferred | RewardDistribution | RewardWithdraw;

export interface RewardDistributionsInstance extends Truffle.ContractInstance {
  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  poolTokenByProtocol(
    _protocol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  protocolByPoolToken(
    _protocol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  registeredPoolTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  poolTokenBalanceChanged: {
    (user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    poolTokenByProtocol(
      _protocol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    protocolByPoolToken(
      _protocol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    registeredPoolTokens(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    supportedRewardTokens(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    poolTokenBalanceChanged: {
      (user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "initialize()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Initializes the contract setting the deployer as the initial owner.
     */
    "initialize(address)": {
      (sender: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        sender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdrawReward(address,address)": {
      (
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw reward tokens for user
     * @param rewardToken Token to withdraw
     */
    "withdrawReward(address)": {
      (rewardToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdrawReward()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Withdraw reward tokens for user
     * @param rewardTokens Array of tokens to withdraw
     */
    "withdrawReward(address[])": {
      (rewardTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "rewardBalanceOf(address,address,address)"(
      user: string,
      poolToken: string,
      rewardToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "rewardBalanceOf(address,address[])"(
      user: string,
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    "rewardBalanceOf(address,address,address[])"(
      user: string,
      poolToken: string,
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Updates user balance
     * @param toDistribution Index of distribution next to the last one, which should be processed
     * @param user User address
     */
    "updateRewardBalance(address,uint256)": {
      (
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates user balance
     * @param user User address
     */
    "updateRewardBalance(address)": {
      (user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
