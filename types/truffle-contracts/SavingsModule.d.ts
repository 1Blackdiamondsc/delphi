/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SavingsModuleContract
  extends Truffle.Contract<SavingsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SavingsModuleInstance>;
}

export interface Deposit {
  name: "Deposit";
  args: {
    protocol: string;
    user: string;
    nAmount: BN;
    nFee: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface DepositToken {
  name: "DepositToken";
  args: {
    protocol: string;
    token: string;
    dnAmount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface PoolAddressChanged {
  name: "PoolAddressChanged";
  args: {
    newPool: string;
    0: string;
  };
}

export interface ProtocolRegistered {
  name: "ProtocolRegistered";
  args: {
    protocol: string;
    poolToken: string;
    0: string;
    1: string;
  };
}

export interface RewardDistribution {
  name: "RewardDistribution";
  args: {
    poolToken: string;
    rewardRoken: string;
    amount: BN;
    totalShares: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface RewardWithdraw {
  name: "RewardWithdraw";
  args: {
    user: string;
    rewardToken: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Withdraw {
  name: "Withdraw";
  args: {
    protocol: string;
    user: string;
    nAmount: BN;
    nFee: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface WithdrawToken {
  name: "WithdrawToken";
  args: {
    protocol: string;
    token: string;
    dnAmount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface YeldDistribution {
  name: "YeldDistribution";
  args: {
    poolToken: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | Deposit
  | DepositToken
  | OwnershipTransferred
  | PoolAddressChanged
  | ProtocolRegistered
  | RewardDistribution
  | RewardWithdraw
  | Withdraw
  | WithdrawToken
  | YeldDistribution;

export interface SavingsModuleInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  poolTokenBalanceChanged: {
    (user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_pool: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _pool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerProtocol: {
    (
      protocol: string,
      poolToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      protocol: string,
      poolToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      protocol: string,
      poolToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      protocol: string,
      poolToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw tokens from protocol (all underlying tokens proportiaonally)
   * @param _protocol Protocol to withdraw from
   * @param nAmount Normalized (to 18 decimals) amount to withdraw
   * @returns Amount of PoolToken burned from user
   */
  withdrawAll: {
    (
      _protocol: string,
      nAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _protocol: string,
      nAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _protocol: string,
      nAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string,
      nAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw token from protocol
   * @param _protocol Protocol to withdraw from
   * @param dnAmount Amount to withdraw (denormalized)
   * @param maxNAmount Max amount of PoolToken to burn
   * @param token Token to withdraw
   * @returns Amount of PoolToken burned from user
   */
  withdraw: {
    (
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string,
      token: string,
      dnAmount: number | BN | string,
      maxNAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Distributes yeld. May be called by bot, if there was no deposits/withdrawals
   */
  distributeYeld: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Distributes reward tokens. May be called by bot, if there was no deposits/withdrawals
   */
  distributeRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  poolTokenByProtocol(
    _protocol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  protocolByPoolToken(
    _protocol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  rewardTokensByProtocol(
    _protocol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  registeredPoolTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  methods: {
    DISTRIBUTION_AGGREGATION_PERIOD(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getModuleAddress(
      module: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    poolTokenBalanceChanged: {
      (user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setPool: {
      (_pool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    registerProtocol: {
      (
        protocol: string,
        poolToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        protocol: string,
        poolToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        protocol: string,
        poolToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        protocol: string,
        poolToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw tokens from protocol (all underlying tokens proportiaonally)
     * @param _protocol Protocol to withdraw from
     * @param nAmount Normalized (to 18 decimals) amount to withdraw
     * @returns Amount of PoolToken burned from user
     */
    withdrawAll: {
      (
        _protocol: string,
        nAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _protocol: string,
        nAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _protocol: string,
        nAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _protocol: string,
        nAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw token from protocol
     * @param _protocol Protocol to withdraw from
     * @param dnAmount Amount to withdraw (denormalized)
     * @param maxNAmount Max amount of PoolToken to burn
     * @param token Token to withdraw
     * @returns Amount of PoolToken burned from user
     */
    withdraw: {
      (
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _protocol: string,
        token: string,
        dnAmount: number | BN | string,
        maxNAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Distributes yeld. May be called by bot, if there was no deposits/withdrawals
     */
    distributeYeld: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Distributes reward tokens. May be called by bot, if there was no deposits/withdrawals
     */
    distributeRewards: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    poolTokenByProtocol(
      _protocol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    protocolByPoolToken(
      _protocol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    rewardTokensByProtocol(
      _protocol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    registeredPoolTokens(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    supportedRewardTokens(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "rewardBalanceOf(address,address,address)"(
      user: string,
      poolToken: string,
      rewardToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "rewardBalanceOf(address,address[])"(
      user: string,
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    "rewardBalanceOf(address,address,address[])"(
      user: string,
      poolToken: string,
      rewardTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Updates user balance
     * @param toDistribution Index of distribution next to the last one, which should be processed
     * @param user User address
     */
    "updateRewardBalance(address,uint256)": {
      (
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        toDistribution: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates user balance
     * @param user User address
     */
    "updateRewardBalance(address)": {
      (user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdrawReward(address,address)": {
      (
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        poolToken: string,
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw reward tokens for user
     * @param rewardToken Token to withdraw
     */
    "withdrawReward(address)": {
      (rewardToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        rewardToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdrawReward()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Withdraw reward tokens for user
     * @param rewardTokens Array of tokens to withdraw
     */
    "withdrawReward(address[])": {
      (rewardTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        rewardTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "initialize()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "initialize(address)": {
      (_pool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deposit tokens to a protocol
     * @param _dnAmounts Array of amounts (denormalized to token decimals)
     * @param _protocol Protocol to deposit tokens
     * @param _tokens Array of tokens to deposit
     */
    "deposit(address,address[],uint256[])": {
      (
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _protocol: string,
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deposit tokens to several protocols
     * @param _dnAmounts Array of amounts (denormalized to token decimals)
     * @param _protocols Array of protocols to deposit tokens (each protocol only once)
     * @param _tokens Array of tokens to deposit
     */
    "deposit(address[],address[],uint256[])": {
      (
        _protocols: string[],
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _protocols: string[],
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        _protocols: string[],
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _protocols: string[],
        _tokens: string[],
        _dnAmounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
