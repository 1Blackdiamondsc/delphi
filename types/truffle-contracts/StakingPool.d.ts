/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StakingPoolContract
  extends Truffle.Contract<StakingPoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StakingPoolInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface PoolAddressChanged {
  name: "PoolAddressChanged";
  args: {
    newPool: string;
    0: string;
  };
}

export interface Staked {
  name: "Staked";
  args: {
    user: string;
    amount: BN;
    total: BN;
    data: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface Unstaked {
  name: "Unstaked";
  args: {
    user: string;
    amount: BN;
    total: BN;
    data: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

type AllEvents = OwnershipTransferred | PoolAddressChanged | Staked | Unstaked;

export interface StakingPoolInstance extends Truffle.ContractInstance {
  defaultLockInDuration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_pool: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _pool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakeHolders(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, boolean]>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the timestamps for when active personal stakes for an address will unlockThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved
   * @param _address address that created the stakes
   * @returns uint256[] array of timestamps
   */
  getPersonalStakeUnlockedTimestamps(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Returns the stake actualAmount for active personal stakes for an addressThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved
   * @param _address address that created the stakes
   * @returns uint256[] array of actualAmounts
   */
  getPersonalStakeActualAmounts(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Returns the addresses that each personal stake was created for by an addressThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved
   * @param _address address that created the stakes
   * @returns address[] array of amounts
   */
  getPersonalStakeForAddresses(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Stakes a certain amount of tokens, this MUST transfer the given amount from the userMUST trigger Staked event
   * @param _amount uint256 the amount of tokens to stake
   * @param _data bytes optional data to include in the Stake event
   */
  stake: {
    (
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Stakes a certain amount of tokens, this MUST transfer the given amount from the callerMUST trigger Staked event
   * @param _amount uint256 the amount of tokens to stake
   * @param _data bytes optional data to include in the Stake event
   * @param _user address the address the tokens are staked for
   */
  stakeFor: {
    (
      _user: string,
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _user: string,
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _user: string,
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Unstaking tokens is an atomic operationâ€”either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be transferred back to their account, and their personalStakeIndex will increment to the next active stake.
   * Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revertMUST trigger Unstaked event
   * @param _amount uint256 the amount of tokens to unstake
   * @param _data bytes optional data to include in the Unstake event
   */
  unstake: {
    (
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the current total of tokens staked for an address
   * @param _address address The address to query
   * @returns uint256 The number of tokens staked for the given address
   */
  totalStakedFor(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the current total of tokens staked
   * @returns uint256 The number of tokens staked in the contract
   */
  totalStaked(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Address of the token being used by the staking interface
   * @returns address The address of the ERC20 token used for staking
   */
  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Since we don't implement the optional interface, this always returns false
   * MUST return true if the optional history functions are implemented, otherwise false
   * @returns bool Whether or not the optional history functions are implemented
   */
  supportsHistory(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Helper function to get specific properties of all of the personal stakes created by an address
   * @param _address address The address to query
   * @returns (uint256[], uint256[], address[]) timestamps array, actualAmounts array, stakedFor array
   */
  getPersonalStakes(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN[], BN[], string[]]>;

  methods: {
    defaultLockInDuration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getModuleAddress(
      module: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setPool: {
      (_pool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    stakeHolders(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, boolean]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the timestamps for when active personal stakes for an address will unlockThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved
     * @param _address address that created the stakes
     * @returns uint256[] array of timestamps
     */
    getPersonalStakeUnlockedTimestamps(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Returns the stake actualAmount for active personal stakes for an addressThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved
     * @param _address address that created the stakes
     * @returns uint256[] array of actualAmounts
     */
    getPersonalStakeActualAmounts(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Returns the addresses that each personal stake was created for by an addressThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved
     * @param _address address that created the stakes
     * @returns address[] array of amounts
     */
    getPersonalStakeForAddresses(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Stakes a certain amount of tokens, this MUST transfer the given amount from the userMUST trigger Staked event
     * @param _amount uint256 the amount of tokens to stake
     * @param _data bytes optional data to include in the Stake event
     */
    stake: {
      (
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Stakes a certain amount of tokens, this MUST transfer the given amount from the callerMUST trigger Staked event
     * @param _amount uint256 the amount of tokens to stake
     * @param _data bytes optional data to include in the Stake event
     * @param _user address the address the tokens are staked for
     */
    stakeFor: {
      (
        _user: string,
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _user: string,
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Unstaking tokens is an atomic operationâ€”either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be transferred back to their account, and their personalStakeIndex will increment to the next active stake.
     * Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revertMUST trigger Unstaked event
     * @param _amount uint256 the amount of tokens to unstake
     * @param _data bytes optional data to include in the Unstake event
     */
    unstake: {
      (
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the current total of tokens staked for an address
     * @param _address address The address to query
     * @returns uint256 The number of tokens staked for the given address
     */
    totalStakedFor(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the current total of tokens staked
     * @returns uint256 The number of tokens staked in the contract
     */
    totalStaked(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Address of the token being used by the staking interface
     * @returns address The address of the ERC20 token used for staking
     */
    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Since we don't implement the optional interface, this always returns false
     * MUST return true if the optional history functions are implemented, otherwise false
     * @returns bool Whether or not the optional history functions are implemented
     */
    supportsHistory(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Helper function to get specific properties of all of the personal stakes created by an address
     * @param _address address The address to query
     * @returns (uint256[], uint256[], address[]) timestamps array, actualAmounts array, stakedFor array
     */
    getPersonalStakes(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN[], BN[], string[]]>;

    "initialize(address,address)": {
      (
        _pool: string,
        _stakingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _pool: string,
        _stakingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _pool: string,
        _stakingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pool: string,
        _stakingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "initialize()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "initialize(address)": {
      (_pool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _pool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
