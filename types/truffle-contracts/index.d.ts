/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface AccessModuleContract
  extends Truffle.Contract<AccessModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AccessModuleInstance>;
}

export interface BaseContract extends Truffle.Contract<BaseInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BaseInstance>;
}

export interface CompoundProtocolDaiContract
  extends Truffle.Contract<CompoundProtocolDaiInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CompoundProtocolDaiInstance>;
}

export interface CompoundProtocolContract
  extends Truffle.Contract<CompoundProtocolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CompoundProtocolInstance>;
}

export interface ComptrollerStubContract
  extends Truffle.Contract<ComptrollerStubInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ComptrollerStubInstance>;
}

export interface ContextContract extends Truffle.Contract<ContextInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContextInstance>;
}

export interface CoreInterfaceContract
  extends Truffle.Contract<CoreInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CoreInterfaceInstance>;
}

export interface CurveFiDepositStubSbtcContract
  extends Truffle.Contract<CurveFiDepositStubSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CurveFiDepositStubSbtcInstance>;
}

export interface CurveFiDepositStubYContract
  extends Truffle.Contract<CurveFiDepositStubYInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CurveFiDepositStubYInstance>;
}

export interface CurveFiProtocolSbtcContract
  extends Truffle.Contract<CurveFiProtocolSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CurveFiProtocolSbtcInstance>;
}

export interface CurveFiProtocolSusdContract
  extends Truffle.Contract<CurveFiProtocolSusdInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CurveFiProtocolSusdInstance>;
}

export interface CurveFiProtocolYContract
  extends Truffle.Contract<CurveFiProtocolYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveFiProtocolYInstance>;
}

export interface CurveFiProtocolContract
  extends Truffle.Contract<CurveFiProtocolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveFiProtocolInstance>;
}

export interface CurveFiSwapStubSbtcContract
  extends Truffle.Contract<CurveFiSwapStubSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CurveFiSwapStubSbtcInstance>;
}

export interface CurveFiSwapStubYContract
  extends Truffle.Contract<CurveFiSwapStubYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveFiSwapStubYInstance>;
}

export interface CurveFiTokenStubSbtcContract
  extends Truffle.Contract<CurveFiTokenStubSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CurveFiTokenStubSbtcInstance>;
}

export interface CurveFiTokenStubYContract
  extends Truffle.Contract<CurveFiTokenStubYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveFiTokenStubYInstance>;
}

export interface DcaFullBalanceHelperContract
  extends Truffle.Contract<DcaFullBalanceHelperInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DcaFullBalanceHelperInstance>;
}

export interface DcaModuleContract extends Truffle.Contract<DcaModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DcaModuleInstance>;
}

export interface DcaOperatorRoleContract
  extends Truffle.Contract<DcaOperatorRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DcaOperatorRoleInstance>;
}

export interface DefiOperatorRoleContract
  extends Truffle.Contract<DefiOperatorRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DefiOperatorRoleInstance>;
}

export interface DistributionTokenContract
  extends Truffle.Contract<DistributionTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DistributionTokenInstance>;
}

export interface Erc165Contract extends Truffle.Contract<Erc165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc165Instance>;
}

export interface Erc20Contract extends Truffle.Contract<Erc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc20Instance>;
}

export interface Erc20BurnableContract
  extends Truffle.Contract<Erc20BurnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc20BurnableInstance>;
}

export interface Erc20DetailedContract
  extends Truffle.Contract<Erc20DetailedInstance> {
  "new"(
    name: string,
    symbol: string,
    decimals: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<Erc20DetailedInstance>;
}

export interface Erc20MintableContract
  extends Truffle.Contract<Erc20MintableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc20MintableInstance>;
}

export interface Erc721Contract extends Truffle.Contract<Erc721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc721Instance>;
}

export interface Erc721BurnableContract
  extends Truffle.Contract<Erc721BurnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc721BurnableInstance>;
}

export interface Erc721EnumerableContract
  extends Truffle.Contract<Erc721EnumerableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc721EnumerableInstance>;
}

export interface Erc721FullContract
  extends Truffle.Contract<Erc721FullInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc721FullInstance>;
}

export interface Erc721MetadataContract
  extends Truffle.Contract<Erc721MetadataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Erc721MetadataInstance>;
}

export interface FakeSavingsModuleContract
  extends Truffle.Contract<FakeSavingsModuleInstance> {
  "new"(
    _supportedRewardTokens: (string | BigNumber)[],
    usdc: string | BigNumber,
    usdcDecimals: number | BigNumber | string,
    usdcPoolToken: string | BigNumber,
    wbtc: string | BigNumber,
    wbtcDecimals: number | BigNumber | string,
    wbtcPoolToken: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<FakeSavingsModuleInstance>;
}

export interface FakeUniswapRouterContract
  extends Truffle.Contract<FakeUniswapRouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FakeUniswapRouterInstance>;
}

export interface FreeErc20Contract extends Truffle.Contract<FreeErc20Instance> {
  "new"(
    name: string,
    symbol: string,
    decimals: number | BigNumber | string,
    amountToMint: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<FreeErc20Instance>;
}

export interface IAccessModuleContract
  extends Truffle.Contract<IAccessModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAccessModuleInstance>;
}

export interface IcErc20Contract extends Truffle.Contract<IcErc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IcErc20Instance>;
}

export interface IComptrollerContract
  extends Truffle.Contract<IComptrollerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IComptrollerInstance>;
}

export interface ICurveFiDepositSbtcContract
  extends Truffle.Contract<ICurveFiDepositSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ICurveFiDepositSbtcInstance>;
}

export interface ICurveFiDepositSusdContract
  extends Truffle.Contract<ICurveFiDepositSusdInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ICurveFiDepositSusdInstance>;
}

export interface ICurveFiDepositYContract
  extends Truffle.Contract<ICurveFiDepositYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiDepositYInstance>;
}

export interface ICurveFiDepositContract
  extends Truffle.Contract<ICurveFiDepositInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiDepositInstance>;
}

export interface ICurveFiRewardsSbtcContract
  extends Truffle.Contract<ICurveFiRewardsSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ICurveFiRewardsSbtcInstance>;
}

export interface ICurveFiRewardsSusdContract
  extends Truffle.Contract<ICurveFiRewardsSusdInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ICurveFiRewardsSusdInstance>;
}

export interface ICurveFiRewardsYContract
  extends Truffle.Contract<ICurveFiRewardsYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiRewardsYInstance>;
}

export interface ICurveFiRewardsContract
  extends Truffle.Contract<ICurveFiRewardsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiRewardsInstance>;
}

export interface ICurveFiSwapSbtcContract
  extends Truffle.Contract<ICurveFiSwapSbtcInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiSwapSbtcInstance>;
}

export interface ICurveFiSwapSusdContract
  extends Truffle.Contract<ICurveFiSwapSusdInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiSwapSusdInstance>;
}

export interface ICurveFiSwapYContract
  extends Truffle.Contract<ICurveFiSwapYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiSwapYInstance>;
}

export interface ICurveFiSwapContract
  extends Truffle.Contract<ICurveFiSwapInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICurveFiSwapInstance>;
}

export interface IdcaFullBalanceHelperContract
  extends Truffle.Contract<IdcaFullBalanceHelperInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IdcaFullBalanceHelperInstance>;
}

export interface IdcaModuleContract
  extends Truffle.Contract<IdcaModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IdcaModuleInstance>;
}

export interface IDefiProtocolContract
  extends Truffle.Contract<IDefiProtocolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDefiProtocolInstance>;
}

export interface Ierc165Contract extends Truffle.Contract<Ierc165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc165Instance>;
}

export interface Ierc20Contract extends Truffle.Contract<Ierc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc20Instance>;
}

export interface Ierc721Contract extends Truffle.Contract<Ierc721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc721Instance>;
}

export interface Ierc721EnumerableContract
  extends Truffle.Contract<Ierc721EnumerableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc721EnumerableInstance>;
}

export interface Ierc721MetadataContract
  extends Truffle.Contract<Ierc721MetadataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc721MetadataInstance>;
}

export interface Ierc721ReceiverContract
  extends Truffle.Contract<Ierc721ReceiverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc721ReceiverInstance>;
}

export interface Ierc900Contract extends Truffle.Contract<Ierc900Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc900Instance>;
}

export interface IPoolTokenBalanceChangeRecipientContract
  extends Truffle.Contract<IPoolTokenBalanceChangeRecipientInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IPoolTokenBalanceChangeRecipientInstance>;
}

export interface IraynavCalculatorContract
  extends Truffle.Contract<IraynavCalculatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IraynavCalculatorInstance>;
}

export interface IrayPortfolioManagerContract
  extends Truffle.Contract<IrayPortfolioManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IrayPortfolioManagerInstance>;
}

export interface IrayStorageContract
  extends Truffle.Contract<IrayStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IrayStorageInstance>;
}

export interface ISavingsModuleContract
  extends Truffle.Contract<ISavingsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISavingsModuleInstance>;
}

export interface IUniswapV2Router02Contract
  extends Truffle.Contract<IUniswapV2Router02Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IUniswapV2Router02Instance>;
}

export interface IyErc20Contract extends Truffle.Contract<IyErc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IyErc20Instance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface MinterRoleContract
  extends Truffle.Contract<MinterRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MinterRoleInstance>;
}

export interface ModuleContract extends Truffle.Contract<ModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ModuleInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface PausableContract extends Truffle.Contract<PausableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PausableInstance>;
}

export interface PauserRoleContract
  extends Truffle.Contract<PauserRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PauserRoleInstance>;
}

export interface PoolContract extends Truffle.Contract<PoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PoolInstance>;
}

export interface PoolTokenCompoundDaiContract
  extends Truffle.Contract<PoolTokenCompoundDaiInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<PoolTokenCompoundDaiInstance>;
}

export interface PoolTokenCurveFiSbtcContract
  extends Truffle.Contract<PoolTokenCurveFiSbtcInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<PoolTokenCurveFiSbtcInstance>;
}

export interface PoolTokenCurveFiSusdContract
  extends Truffle.Contract<PoolTokenCurveFiSusdInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<PoolTokenCurveFiSusdInstance>;
}

export interface PoolTokenCurveFiYContract
  extends Truffle.Contract<PoolTokenCurveFiYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PoolTokenCurveFiYInstance>;
}

export interface PoolTokenCurveFiYContract
  extends Truffle.Contract<PoolTokenCurveFiYInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PoolTokenCurveFiYInstance>;
}

export interface PoolTokenContract extends Truffle.Contract<PoolTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PoolTokenInstance>;
}

export interface ProtocolBaseContract
  extends Truffle.Contract<ProtocolBaseInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ProtocolBaseInstance>;
}

export interface RayProtocolContract
  extends Truffle.Contract<RayProtocolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RayProtocolInstance>;
}

export interface RewardDistributionsContract
  extends Truffle.Contract<RewardDistributionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RewardDistributionsInstance>;
}

export interface SavingsModuleContract
  extends Truffle.Contract<SavingsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SavingsModuleInstance>;
}

export interface StakingPoolContract
  extends Truffle.Contract<StakingPoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StakingPoolInstance>;
}

export interface WhitelistAdminRoleContract
  extends Truffle.Contract<WhitelistAdminRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistAdminRoleInstance>;
}

export interface WhitelistedRoleContract
  extends Truffle.Contract<WhitelistedRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistedRoleInstance>;
}

export interface AccessModuleInstance extends Truffle.ContractInstance {
  addPauser: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addWhitelistAdmin: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addWhitelisted: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isPauser(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelisted(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeWhitelisted: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceWhitelisted: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  whitelistEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  enableWhitelist: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  disableWhitelist: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isOperationAllowed(
    operation: number | BigNumber | string,
    sender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface BaseInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface CompoundProtocolDaiInstance extends Truffle.ContractInstance {
  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface CompoundProtocolInstance extends Truffle.ContractInstance {
  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ComptrollerStubInstance extends Truffle.ContractInstance {
  ANNUAL_SECONDS(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  baseCTokenToCompRatio(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  targetAPY(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimComp: {
    (
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSupportedCTokens: {
    (
      _cTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _cTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTargetAPY: {
    (
      _targetAPY: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _targetAPY: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _targetAPY: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _targetAPY: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBaseCTokenToCompRatio: {
    (
      _baseCTokenToCompRatio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseCTokenToCompRatio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseCTokenToCompRatio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseCTokenToCompRatio: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCompAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  supportedCTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
}

export interface ContextInstance extends Truffle.ContractInstance {}

export interface CoreInterfaceInstance extends Truffle.ContractInstance {
  set: {
    (
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMetadata: {
    (
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    _module: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isConstant(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get(_name: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getName(
    _module: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    _current: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface CurveFiDepositStubSbtcInstance
  extends Truffle.ContractInstance {
  N_COINS(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  add_liquidity: {
    (
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_one_coin: {
    (
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw_donated_dust: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  underlying_coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calc_withdraw_one_coin(
    _token_amount: number | BigNumber | string,
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface CurveFiDepositStubYInstance extends Truffle.ContractInstance {
  N_COINS(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  add_liquidity: {
    (
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_one_coin: {
    (
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw_donated_dust: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  underlying_coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calc_withdraw_one_coin(
    _token_amount: number | BigNumber | string,
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface CurveFiProtocolSbtcInstance extends Truffle.ContractInstance {
  DONATE_DUST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  curveFiDeposit(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewardToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewards(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenIndex(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setCurveFi: {
    (
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSlippageMultiplier: {
    (
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  slippageMultiplier(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CurveFiProtocolSusdInstance extends Truffle.ContractInstance {
  DONATE_DUST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  curveFiDeposit(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewardToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewards(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenIndex(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setCurveFi: {
    (
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSlippageMultiplier: {
    (
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  slippageMultiplier(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CurveFiProtocolYInstance extends Truffle.ContractInstance {
  DONATE_DUST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  curveFiDeposit(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewardToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewards(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenIndex(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setCurveFi: {
    (
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSlippageMultiplier: {
    (
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  slippageMultiplier(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CurveFiProtocolInstance extends Truffle.ContractInstance {
  DONATE_DUST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  curveFiDeposit(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewardToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiRewards(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiSwap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curveFiToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  slippageMultiplier(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setCurveFi: {
    (
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      deposit: string | BigNumber,
      rewardsController: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSlippageMultiplier: {
    (
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _slippageMultiplier: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTokenIndex(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface CurveFiSwapStubSbtcInstance extends Truffle.ContractInstance {
  N_COINS(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  add_liquidity: {
    (
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calc_token_amount(
    amounts: (number | BigNumber | string)[],
    deposit: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balances(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  A(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  fee(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface CurveFiSwapStubYInstance extends Truffle.ContractInstance {
  N_COINS(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      __coins: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  add_liquidity: {
    (
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calc_token_amount(
    amounts: (number | BigNumber | string)[],
    deposit: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balances(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  A(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  fee(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface CurveFiTokenStubSbtcInstance extends Truffle.ContractInstance {
  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CurveFiTokenStubYInstance extends Truffle.ContractInstance {
  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DcaFullBalanceHelperInstance extends Truffle.ContractInstance {
  isInArray(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokenArrayOf(
    arg0: string | BigNumber,
    arg1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFullAccountBalances: {
    (
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DcaModuleInstance extends Truffle.ContractInstance {
  _accountOf(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  addDCAOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  burn: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  dcaFullBalanceHelper(txDetails?: Truffle.TransactionDetails): Promise<string>;

  deadline(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, BigNumber]>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  globalPeriodBuyAmount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isDCAOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextBuyTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  periodTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  prevPoolTokenBalanceOf(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  protocolMaxFee(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  removeAfterDistribution(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceDCAOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  rewardPools(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  router(txDetails?: Truffle.TransactionDetails): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenDataOf(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string, string, string]>;

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenToSell(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  tokensToBuy(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTokenIdByAddress(
    userAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAccountBalance(
    tokenId: number | BigNumber | string,
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getFullAccountBalances: {
    (
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTokenData: {
    (
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDeadline: {
    (
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProtocolMaxFee: {
    (
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  purchase: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface DcaOperatorRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addDCAOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceDCAOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDCAOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface DefiOperatorRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface DistributionTokenInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface Erc165Instance extends Truffle.ContractInstance {
  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface Erc20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Erc20BurnableInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Erc20DetailedInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface Erc20MintableInstance extends Truffle.ContractInstance {
  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Erc721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Erc721BurnableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Erc721EnumerableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface Erc721FullInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Erc721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface FakeSavingsModuleInstance extends Truffle.ContractInstance {
  decimals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens_(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  tokens(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  deposit: {
    (
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;
}

export interface FakeUniswapRouterInstance extends Truffle.ContractInstance {
  getAmountsOut(
    amountIn: number | BigNumber | string,
    path: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  swapExactTokensForTokens: {
    (
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FreeErc20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IAccessModuleInstance extends Truffle.ContractInstance {
  isOperationAllowed(
    operation: number | BigNumber | string,
    sender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IcErc20Instance extends Truffle.ContractInstance {
  transfer: {
    (
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      src: string | BigNumber,
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      src: string | BigNumber,
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      src: string | BigNumber,
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      src: string | BigNumber,
      dst: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOfUnderlying: {
    (
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  exchangeRateStored(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  accrueInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  mint: {
    (
      mintAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      mintAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      mintAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mintAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      redeemTokens: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemTokens: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      redeemTokens: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemTokens: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemUnderlying: {
    (
      redeemAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      redeemAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IComptrollerInstance extends Truffle.ContractInstance {
  claimComp: {
    (
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCompAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ICurveFiDepositSbtcInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ICurveFiDepositSusdInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ICurveFiDepositYInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_uamounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uamounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ICurveFiDepositInstance extends Truffle.ContractInstance {
  remove_liquidity_one_coin: {
    (
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token_amount: number | BigNumber | string,
      i: number | BigNumber | string,
      min_uamount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw_donated_dust: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  underlying_coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calc_withdraw_one_coin(
    _token_amount: number | BigNumber | string,
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ICurveFiRewardsSbtcInstance extends Truffle.ContractInstance {
  rewardsToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ICurveFiRewardsSusdInstance extends Truffle.ContractInstance {
  snx(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ICurveFiRewardsYInstance extends Truffle.ContractInstance {
  yfi(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ICurveFiRewardsInstance extends Truffle.ContractInstance {
  stake: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getReward: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  earned(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ICurveFiSwapSbtcInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calc_token_amount(
    amounts: (number | BigNumber | string)[],
    deposit: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ICurveFiSwapSusdInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calc_token_amount(
    amounts: (number | BigNumber | string)[],
    deposit: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ICurveFiSwapYInstance extends Truffle.ContractInstance {
  add_liquidity: {
    (
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      min_mint_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity: {
    (
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      min_amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove_liquidity_imbalance: {
    (
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amounts: (number | BigNumber | string)[],
      max_burn_amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calc_token_amount(
    amounts: (number | BigNumber | string)[],
    deposit: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ICurveFiSwapInstance extends Truffle.ContractInstance {
  balances(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  A(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  fee(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  coins(
    i: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IdcaFullBalanceHelperInstance
  extends Truffle.ContractInstance {
  getFullAccountBalances: {
    (
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dcaModule: string | BigNumber,
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IdcaModuleInstance extends Truffle.ContractInstance {
  tokenToSell(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokensToBuy(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  rewardPools(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getTokenIdByAddress(
    userAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAccountBuyAmount: {
    (
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getFullAccountBalances: {
    (
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      tokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTokenData: {
    (
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      decimals: number | BigNumber | string,
      pool: string | BigNumber,
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDeadline: {
    (
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newDeadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProtocolMaxFee: {
    (
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxFee: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      newBuyAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  purchase: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface IDefiProtocolInstance extends Truffle.ContractInstance {
  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface Ierc165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface Ierc20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Ierc721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Ierc721EnumerableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  tokenByIndex(
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface Ierc721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface Ierc721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Ierc900Instance extends Truffle.ContractInstance {
  stake: {
    (
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakeFor: {
    (
      user: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unstake: {
    (
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalStakedFor(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalStaked(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  supportsHistory(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface IPoolTokenBalanceChangeRecipientInstance
  extends Truffle.ContractInstance {
  poolTokenBalanceChanged: {
    (user: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IraynavCalculatorInstance extends Truffle.ContractInstance {
  getTokenValue: {
    (
      portfolioId: string | BigNumber,
      tokenId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BigNumber,
      tokenId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      portfolioId: string | BigNumber,
      tokenId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BigNumber,
      tokenId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IrayPortfolioManagerInstance extends Truffle.ContractInstance {
  mint: {
    (
      portfolioId: string | BigNumber,
      beneficiary: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BigNumber,
      beneficiary: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      portfolioId: string | BigNumber,
      beneficiary: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BigNumber,
      beneficiary: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      tokenId: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      tokenId: string | BigNumber,
      valueToWithdraw: number | BigNumber | string,
      originalCaller: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BigNumber,
      valueToWithdraw: number | BigNumber | string,
      originalCaller: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      tokenId: string | BigNumber,
      valueToWithdraw: number | BigNumber | string,
      originalCaller: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BigNumber,
      valueToWithdraw: number | BigNumber | string,
      originalCaller: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IrayStorageInstance extends Truffle.ContractInstance {
  getTokenKey(
    rayTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPrincipalAddress(
    portfolioId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getIsERC20(
    principalAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getContractAddress(
    contractId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenShares(
    portfolioId: string | BigNumber,
    rayTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTokenCapital(
    portfolioId: string | BigNumber,
    rayTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTokenAllowance(
    portfolioId: string | BigNumber,
    rayTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ISavingsModuleInstance extends Truffle.ContractInstance {
  deposit: {
    (
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      rewardTokens: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;
}

export interface IUniswapV2Router02Instance extends Truffle.ContractInstance {
  factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addLiquidity: {
    (
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      amountADesired: number | BigNumber | string,
      amountBDesired: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      amountADesired: number | BigNumber | string,
      amountBDesired: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber, BigNumber]>;
    sendTransaction(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      amountADesired: number | BigNumber | string,
      amountBDesired: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      amountADesired: number | BigNumber | string,
      amountBDesired: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addLiquidityETH: {
    (
      token: string | BigNumber,
      amountTokenDesired: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amountTokenDesired: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber, BigNumber]>;
    sendTransaction(
      token: string | BigNumber,
      amountTokenDesired: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amountTokenDesired: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidity: {
    (
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETH: {
    (
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityWithPermit: {
    (
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BigNumber,
      tokenB: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountAMin: number | BigNumber | string,
      amountBMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETHWithPermit: {
    (
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokens: {
    (
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactTokens: {
    (
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactETHForTokens: {
    (
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactETH: {
    (
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BigNumber | string,
      amountInMax: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForETH: {
    (
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapETHForExactTokens: {
    (
      amountOut: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber[]>;
    sendTransaction(
      amountOut: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  quote(
    amountA: number | BigNumber | string,
    reserveA: number | BigNumber | string,
    reserveB: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: number | BigNumber | string,
    reserveIn: number | BigNumber | string,
    reserveOut: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAmountIn(
    amountOut: number | BigNumber | string,
    reserveIn: number | BigNumber | string,
    reserveOut: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAmountsOut(
    amountIn: number | BigNumber | string,
    path: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  getAmountsIn(
    amountOut: number | BigNumber | string,
    path: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  removeLiquidityETHSupportingFeeOnTransferTokens: {
    (
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens: {
    (
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      liquidity: number | BigNumber | string,
      amountTokenMin: number | BigNumber | string,
      amountETHMin: number | BigNumber | string,
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      approveMax: boolean,
      v: number | BigNumber | string,
      r: string | BigNumber,
      s: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokensSupportingFeeOnTransferTokens: {
    (
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactETHForTokensSupportingFeeOnTransferTokens: {
    (
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForETHSupportingFeeOnTransferTokens: {
    (
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BigNumber | string,
      amountOutMin: number | BigNumber | string,
      path: (string | BigNumber)[],
      to: string | BigNumber,
      deadline: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IyErc20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  deposit: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      shares: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      shares: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      shares: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      shares: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPricePerFullShare(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  token: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MinterRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ModuleInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface OwnableInstance extends Truffle.ContractInstance {
  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PausableInstance extends Truffle.ContractInstance {
  addPauser: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPauser(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PauserRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPauser(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addPauser: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PoolInstance extends Truffle.ContractInstance {
  abiOf(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  description(txDetails?: Truffle.TransactionDetails): Promise<string>;

  founder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  is_constant(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setMetadata: {
    (
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  set: {
    (
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _module: string | BigNumber,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    _module: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isConstant(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get(_name: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getName(
    _module: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    _current: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface PoolTokenCompoundDaiInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PoolTokenCurveFiSbtcInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PoolTokenCurveFiSusdInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PoolTokenCurveFiYInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PoolTokenCurveFiYInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PoolTokenInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  addMinter: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributedAmount(
    fromDistribution: number | BigNumber | string,
    toDistribution: number | BigNumber | string,
    initialBalance: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateUnclaimedDistributions(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  claimDistributions: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDistribution: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionAccumulator(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributionTotalSupply(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  distributions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  fullBalanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isMinter(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mint: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  nextDistributionTimestamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  nextDistributions(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      decimals: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProtocolBaseInstance extends Truffle.ContractInstance {
  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isSupportedRewardToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RayProtocolInstance extends Truffle.ContractInstance {
  addDefiOperator: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BigNumber[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isDefiOperator(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceDefiOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      user: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _pool: string | BigNumber,
      _token: string | BigNumber,
      _portfolioId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      _token: string | BigNumber,
      _portfolioId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      _token: string | BigNumber,
      _portfolioId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      _token: string | BigNumber,
      _portfolioId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onERC721Received(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: number | BigNumber | string,
    arg3: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  handleDeposit: {
    (
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string | BigNumber,
      amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  normalizedBalance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  canSwapToToken(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  supportedTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  supportedTokensCount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isSupportedRewardToken(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface RewardDistributionsInstance extends Truffle.ContractInstance {
  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  poolTokenByProtocol(
    _protocol: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  protocolByPoolToken(
    _protocol: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  registeredPoolTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  poolTokenBalanceChanged: {
    (user: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rewardBalanceOf(
    user: string | BigNumber,
    poolToken: string | BigNumber,
    rewardToken: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  updateRewardBalance: {
    (
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface SavingsModuleInstance extends Truffle.ContractInstance {
  DISTRIBUTION_AGGREGATION_PERIOD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  poolTokenBalanceChanged: {
    (user: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  rewardBalanceOf(
    user: string | BigNumber,
    poolToken: string | BigNumber,
    rewardToken: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateRewardBalance: {
    (
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      toDistribution: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      poolToken: string | BigNumber,
      rewardToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  registerProtocol: {
    (
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      protocol: string | BigNumber,
      poolToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      _tokens: (string | BigNumber)[],
      _dnAmounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawAll: {
    (
      _protocol: string | BigNumber,
      nAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      nAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      nAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      nAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocol: string | BigNumber,
      token: string | BigNumber,
      dnAmount: number | BigNumber | string,
      maxNAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributeYeld: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  distributeRewards: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  poolTokenByProtocol(
    _protocol: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  protocolByPoolToken(
    _protocol: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  rewardTokensByProtocol(
    _protocol: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  registeredPoolTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  supportedRewardTokens(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;
}

export interface StakingPoolInstance extends Truffle.ContractInstance {
  defaultLockInDuration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakeHolders(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, boolean]>;

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _pool: string | BigNumber,
      _stakingToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _pool: string | BigNumber,
      _stakingToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BigNumber,
      _stakingToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BigNumber,
      _stakingToken: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPersonalStakeUnlockedTimestamps(
    _address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  getPersonalStakeActualAmounts(
    _address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  getPersonalStakeForAddresses(
    _address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  stake: {
    (
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakeFor: {
    (
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unstake: {
    (
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalStakedFor(
    _address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalStaked(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  supportsHistory(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getPersonalStakes(
    _address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber[], BigNumber[], string[]]>;
}

export interface WhitelistAdminRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelistAdmin: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface WhitelistedRoleInstance extends Truffle.ContractInstance {
  addWhitelistAdmin: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelisted(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelisted: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeWhitelisted: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceWhitelisted: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}
